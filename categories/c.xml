<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>程光曦微 (C++)</title><link>http://getnikola.com/</link><description>打酱油的码农</description><atom:link href="http://getnikola.com/categories/c.xml" type="application/rss+xml" rel="self"></atom:link><lastBuildDate>Tue, 14 Jan 2014 16:14:03 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>内存泄露，我擦</title><link>http://getnikola.com//posts/oh-memory-leak.html</link><description>&lt;!-- 
.. link: 
.. description: 
.. tags: 内存泄露,C++,VisualLeak Detector,valgrind
.. date: 2012/11/18 00:31:01
.. title: 内存泄露，我擦
.. slug: oh-memory-leak
--&gt;

&lt;p&gt;在这个快节奏的环境下，男人怕泄，女人怕漏。一个C/C++程序猿怕啥呢——泄露。下面是我从别的地方摘录的一段[1]。&lt;/p&gt;
&lt;p&gt;“C/C++编译的程序的内存分配分为以下几个部分：栈区（stack）——由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。堆区（heap）——一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。全局区（静态区）（static）——全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。文字常量区——常量字符串就是放在这里的，程序结束后由系统释放。程序代码区——存放函数体的二进制代码。”&lt;/p&gt;
&lt;p&gt;Memory Leak中文翻译为内存泄露，这是一个令人头疼的话题，因为由程序猿手动动态分配的内存一般都在heap上，这个蛋疼的东西总困扰着C/C++程序猿，如果不手动释放该内存，在程序退出之前，这一块内存是不会被释放的。&lt;/p&gt;
&lt;p&gt;有人这时候就站出来了，你怎么能这么懒呢，用完释放不就得了吗。我只能说，“猿”非圣贤，咋就不能有个疏忽的地方呢。一旦疏忽就悲剧了，代码逻辑简单的还好，一旦复杂起来，恐怕只有上帝才知道是哪个地方泄露了。都这样了，当然咱们不多说废话了，我来介绍两个专搞内存泄露的工具。&lt;/p&gt;
&lt;p&gt;Windows工具——VisualLeak Detector(VLD)，这货是用在Visual Studio上面的，至于如果你使用MingW之类的我还木有研究过。官方网站是：&lt;a href="http://vld.codeplex.com/" title="http://vld.codeplex.com/"&gt;VisualLeak Detector(VLD)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载下来，安装，把安装目录下面的src目录添加到VisualStudio的include path里面，把lib目录添加到Visual Studio的lib path里面，注意有lib目录有两个分别代表的是x86和x64，这要根据你的工程的配置来选择使用哪一个。好了一切就绪了，我们试一把。&lt;/p&gt;
&lt;p&gt;首先编写一个非常简单的泄露程序，虽然我在一些面试题目上面看到说这个不算内存泄露。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    return 0;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用F5直接调试运行一下，观察output的最后一段：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Visual&lt;/span&gt; &lt;span class="n"&gt;Leak&lt;/span&gt; &lt;span class="n"&gt;Detector&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;leaks&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;----------&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x00379580&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;----------&lt;/span&gt;
  &lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;leak&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;leak&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cpp&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;leak&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exe&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x7&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;vctools&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;crt_bld&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;self_x86&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;crtexe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;536&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;leak&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exe&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;__tmainCRTStartup&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x19&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;vctools&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;crt_bld&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;self_x86&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;crt&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;crtexe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;377&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;leak&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exe&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;mainCRTStartup&lt;/span&gt;
    &lt;span class="mh"&gt;0x765&lt;/span&gt;&lt;span class="n"&gt;CED6C&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;kernel32&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dll&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;BaseThreadInitThunk&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x12&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
    &lt;span class="mh"&gt;0x77&lt;/span&gt;&lt;span class="n"&gt;B8377B&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;ntdll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dll&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;RtlInitializeExceptionChain&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xEF&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
    &lt;span class="mh"&gt;0x77&lt;/span&gt;&lt;span class="n"&gt;B8374E&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;ntdll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dll&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;RtlInitializeExceptionChain&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xC2&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
  &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;     &lt;span class="o"&gt;........&lt;/span&gt; &lt;span class="o"&gt;........&lt;/span&gt;
    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;     &lt;span class="o"&gt;........&lt;/span&gt; &lt;span class="o"&gt;........&lt;/span&gt;
    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;    &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt; &lt;span class="n"&gt;CD&lt;/span&gt;                                   &lt;span class="o"&gt;........&lt;/span&gt; &lt;span class="o"&gt;........&lt;/span&gt;


&lt;span class="n"&gt;Visual&lt;/span&gt; &lt;span class="n"&gt;Leak&lt;/span&gt; &lt;span class="n"&gt;Detector&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;leak&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="n"&gt;Largest&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;allocations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Visual&lt;/span&gt; &lt;span class="n"&gt;Leak&lt;/span&gt; &lt;span class="n"&gt;Detector&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;exiting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="s1"&gt;'[7652] leak.exe'&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;exited&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里就很明白了把，这个vld工具可以打印出泄露调用的堆栈，双击任意错误处，可以到达错误的地方，e:\projects\leak\leak\source.cpp (6): leak.exe!main + 0x7 bytes双击这句话就定位到了main函数的第六行。哈哈，很方便吧！&lt;/p&gt;
&lt;p&gt;使用Linux的童鞋要鄙视我们了，人家都是命令行的高手，不屑于使用GUI工具，再说也木有Visual Studio，Vim Emacs之类的利器可以秒杀Visual Studio。这时候如何定位泄露的地方呢？现在推出终极杀人魔——valgrind。官网：&lt;a href="http://www.valgrind.org" title="http://www.valgrind.org"&gt;valgrind&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用debian和ubuntu的童鞋可以使用apt-get命令安装此软件。&lt;/p&gt;
&lt;p&gt;首先使用gcc的童鞋首先编译的时候加上-g的debug选项，优化最好是使用-o0，然后如果你的程序运行是使用如下的参数方式：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;myprog&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在就改成下面的方式：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;valgrind&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;leak&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="n"&gt;myprog&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等到程序结束的时候就可以看到泄露的地方啦。（本人Linux菜鸟，没法给大家演示了，不然又要重启进入Linux或者打开卡卡的虚拟机）&lt;/p&gt;
&lt;p&gt;哈哈，到这里了，泄露还是否那么可怕呢。我给大家一张恐怖的泄露截图吧，以供娱乐：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://getnikola.com//galleries/memory-leak/leak.jpg"&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;[1] &lt;a href="http://bbs.csdn.net/topics/390050717"&gt;http://bbs.csdn.net/topics/390050717&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href="http://vld.codeplex.com/documentation"&gt;http://vld.codeplex.com/documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href="http://www.valgrind.org/docs/manual/quick-start.html#quick-start.mcrun"&gt;http://www.valgrind.org/docs/manual/quick-start.html#quick-start.mcrun&lt;/a&gt;&lt;/p&gt;</description><category>内存泄露</category><category>C++</category><category>VisualLeak Detector</category><category>valgrind</category><guid>http://getnikola.com//posts/oh-memory-leak.html</guid><pubDate>Sun, 18 Nov 2012 00:31:01 GMT</pubDate></item></channel></rss>